---
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  loading = 'lazy', 
  class: className = '',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw'
} = Astro.props;

// Generate WebP and fallback sources
const webpSrc = src.replace(/\.(jpg|jpeg|png)$/i, '.webp');
const fallbackSrc = src;

// Handle URL encoding for filenames with spaces
const encodedWebpSrc = encodeURI(webpSrc);
const encodedFallbackSrc = encodeURI(fallbackSrc);

// Generate responsive image sizes if width is provided
const generateSrcSet = (baseSrc: string, baseWidth?: number) => {
  if (!baseWidth) return baseSrc;
  
  const sizes = [320, 640, 768, 1024, 1280];
  return sizes
    .filter(size => size <= baseWidth)
    .map(size => {
      const ratio = size / baseWidth;
      const scaledHeight = height ? Math.round(height * ratio) : undefined;
      return `${baseSrc} ${size}w`;
    })
    .join(', ');
};
---

<picture>
  <!-- WebP format for modern browsers -->
  <source 
    type="image/webp" 
    srcset={generateSrcSet(webpSrc, width)}
    sizes={sizes}
  />
  
  <!-- Fallback for older browsers -->
  <source 
    type="image/jpeg" 
    srcset={generateSrcSet(fallbackSrc, width)}
    sizes={sizes}
  />
  
  <!-- Fallback img element -->
  <img 
    src={fallbackSrc}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class={className}
    decoding="async"
  />
</picture>
